var a={"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"GET, POST, PUT, DELETE, OPTIONS","Access-Control-Allow-Headers":"Content-Type, Authorization"},O={async fetch(t,n){let e=new URL(t.url);if(t.method==="OPTIONS")return new Response(null,{headers:a});try{if(e.pathname==="/api/health")return f();if(e.pathname.startsWith("/api/availability/"))return h(t,n);if(e.pathname==="/api/appointments"&&t.method==="POST")return m(t,n);if(e.pathname==="/api/config"){if(t.method==="GET")return g(n);if(t.method==="POST")return E(t,n)}return new Response("Not Found",{status:404,headers:a})}catch(r){return console.error("Worker error:",r),new Response("Internal Server Error",{status:500,headers:a})}}};function f(){return new Response(JSON.stringify({status:"ok",timestamp:new Date().toISOString()}),{headers:{...a,"Content-Type":"application/json"}})}async function h(t,n){let r=new URL(t.url).pathname.split("/").pop();if(!r)return new Response(JSON.stringify({error:"Date required"}),{status:400,headers:{...a,"Content-Type":"application/json"}});try{let o=await n.DB.prepare("SELECT time FROM appointments WHERE date = ?").bind(r).all(),c=[];for(let i=9;i<=17;i++)for(let l=0;l<60&&!(i===17&&l>0);l+=30){let u=`${i.toString().padStart(2,"0")}:${l.toString().padStart(2,"0")}`;c.push(u)}let p=o.results?.map(i=>i.time)||[],d=c.filter(i=>!p.includes(i));return new Response(JSON.stringify({availableSlots:d}),{headers:{...a,"Content-Type":"application/json"}})}catch(s){return console.error("Error fetching availability:",s),new Response(JSON.stringify({error:"Failed to fetch availability"}),{status:500,headers:{...a,"Content-Type":"application/json"}})}}async function m(t,n){try{let e=await t.json();if(!e.name||!e.phone||!e.date||!e.time)return new Response(JSON.stringify({error:"Missing required fields"}),{status:400,headers:{...a,"Content-Type":"application/json"}});let o={id:(await n.DB.prepare(`
      INSERT INTO appointments (name, phone, email, service, notes, date, time, status, googleCalendarEventId, whatsappSent)
      VALUES (?, ?, ?, ?, ?, ?, ?, 'scheduled', '', false)
    `).bind(e.name,e.phone,e.email||"",e.service||"",e.notes||"",e.date,e.time).run()).meta.last_row_id,name:e.name,phone:e.phone,email:e.email||"",service:e.service||"",notes:e.notes||"",date:e.date,time:e.time,status:"scheduled",googleCalendarEventId:"",whatsappSent:!1};if(n.GOOGLE_CALENDAR_ACCESS_TOKEN)try{await S(o,n.GOOGLE_CALENDAR_ACCESS_TOKEN)}catch(c){console.error("Google Calendar error:",c)}if(n.EVOLUTION_API_URL&&n.EVOLUTION_API_KEY)try{await y(o,n)}catch(c){console.error("WhatsApp error:",c)}return new Response(JSON.stringify(o),{status:201,headers:{...a,"Content-Type":"application/json"}})}catch(e){return console.error("Error creating appointment:",e),new Response(JSON.stringify({error:"Failed to create appointment"}),{status:500,headers:{...a,"Content-Type":"application/json"}})}}async function g(t){try{let e=await t.DB.prepare("SELECT value FROM configurations WHERE key = ?").bind("app_config").first(),r={googleCalendar:{enabled:!1,calendarId:"",accessToken:""},whatsapp:{enabled:!1,apiUrl:"",apiKey:"",instance:"",webhookUrl:""}};return e&&(r=JSON.parse(e.value)),new Response(JSON.stringify(r),{headers:{...a,"Content-Type":"application/json"}})}catch(n){return console.error("Error fetching config:",n),new Response(JSON.stringify({error:"Failed to fetch configuration"}),{status:500,headers:{...a,"Content-Type":"application/json"}})}}async function E(t,n){try{let e=await t.json();return await n.DB.prepare("SELECT id FROM configurations WHERE key = ?").bind("app_config").first()?await n.DB.prepare("UPDATE configurations SET value = ? WHERE key = ?").bind(JSON.stringify(e),"app_config").run():await n.DB.prepare("INSERT INTO configurations (key, value) VALUES (?, ?)").bind("app_config",JSON.stringify(e)).run(),new Response(JSON.stringify({success:!0}),{headers:{...a,"Content-Type":"application/json"}})}catch(e){return console.error("Error updating config:",e),new Response(JSON.stringify({error:"Failed to update configuration"}),{status:500,headers:{...a,"Content-Type":"application/json"}})}}async function S(t,n){let e=new Date(`${t.date}T${t.time}:00`),r=new Date(e);r.setHours(r.getHours()+1);let s={summary:`Agendamento - ${t.name}`,description:`
Servi\xE7o: ${t.service}
Cliente: ${t.name}
Telefone: ${t.phone}
Email: ${t.email}
Observa\xE7\xF5es: ${t.notes}
    `.trim(),start:{dateTime:e.toISOString(),timeZone:"America/Sao_Paulo"},end:{dateTime:r.toISOString(),timeZone:"America/Sao_Paulo"},attendees:t.email?[{email:t.email}]:[]},o=await fetch("https://www.googleapis.com/calendar/v3/calendars/primary/events",{method:"POST",headers:{Authorization:`Bearer ${n}`,"Content-Type":"application/json"},body:JSON.stringify(s)});if(!o.ok)throw new Error(`Google Calendar API error: ${o.status}`);return await o.json()}async function y(t,n){let e=`
\u2705 *Agendamento Confirmado*

\u{1F4C5} *Data:* ${new Date(t.date).toLocaleDateString("pt-BR")}
\u{1F550} *Hor\xE1rio:* ${t.time}
\u{1F464} *Cliente:* ${t.name}
\u{1F4DE} *Telefone:* ${t.phone}
\u{1F4E7} *Email:* ${t.email||"N\xE3o informado"}
\u{1F527} *Servi\xE7o:* ${t.service||"N\xE3o especificado"}

\u{1F4DD} *Observa\xE7\xF5es:* ${t.notes||"Nenhuma observa\xE7\xE3o"}

Obrigado por agendar conosco! \u{1F642}
  `.trim(),r=`${n.EVOLUTION_API_URL}/message/sendText/${n.EVOLUTION_INSTANCE}`,s=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json",apikey:n.EVOLUTION_API_KEY},body:JSON.stringify({number:t.phone.replace(/\D/g,""),text:e})});if(!s.ok)throw new Error(`Evolution API error: ${s.status}`);return await s.json()}export{O as default};
